generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int        @id @default(autoincrement())
  mobile             String     @unique
  password           String
  name               String
  picture            String
  createdAt          DateTime   @default(now())
  address            String?
  allowCalls         Boolean    @default(true)
  allowSms           Boolean    @default(true)
  bio                String?
  company            String?
  dateOfBirth        DateTime?
  email              String?    @unique
  emailNotifications Boolean    @default(true)
  gender             String?
  isActive           Boolean    @default(true)
  isEmailVerified    Boolean    @default(false)
  isPhoneVerified    Boolean    @default(false)
  isVerified         Boolean    @default(false)
  language           String     @default("fr")
  lastLoginAt        DateTime?
  location           String?
  marketingEmails    Boolean    @default(false)
  profession         String?
  pushNotifications  Boolean    @default(true)
  showEmail          Boolean    @default(false)
  showPhone          Boolean    @default(true)
  smsNotifications   Boolean    @default(true)
  successfulSales    Int        @default(0)
  timezone           String     @default("Africa/Dakar")
  totalListings      Int        @default(0)
  totalViews         Int        @default(0)
  updatedAt          DateTime   @default(now()) @updatedAt
  website            String?
  accountType        String     @default("individual")
  annonces           Annonce[]
  bookmarks          Bookmark[]
}

model Annonce {
  id               Int          @id @default(autoincrement())
  title            String
  description      String
  price            Float
  location         String
  picture          String
  gallery          String[]
  createdAt        DateTime     @default(now())
  userId           Int
  additionalFields Json?
  category         String?
  condition        String?
  status           String       @default("active")
  subcategory      String?
  updatedAt        DateTime     @updatedAt
  categoryId       Int?
  subcategoryId    Int?
  oldCategory      String?
  oldSubcategory   String?
  Category         Category?    @relation(fields: [categoryId], references: [id])
  Subcategory      Subcategory? @relation(fields: [subcategoryId], references: [id])
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookmarks        Bookmark[]

  @@index([status, createdAt(sort: Desc)])
  @@index([status, categoryId, createdAt(sort: Desc)])
  @@index([status, price])
  @@index([status, location])
  @@index([status, condition])
  @@index([userId, status])
  @@index([title])
  @@index([status, categoryId, subcategoryId, createdAt(sort: Desc)])
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  userId    Int
  annonceId Int
  createdAt DateTime @default(now())
  annonce   Annonce  @relation(fields: [annonceId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, annonceId])
}

model Category {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  slug        String        @unique
  icon        String
  description String?
  isActive    Boolean       @default(true)
  sortOrder   Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  Annonce     Annonce[]
  Subcategory Subcategory[]
}

model Subcategory {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String
  description String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  categoryId  Int
  Annonce     Annonce[]
  Category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, slug])
}
