const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function setupCategories() {
  console.log('üöÄ Configuration des cat√©gories en cours...');

  try {
    // V√©rifier si les tables existent d√©j√†
    const existingCategories = await prisma.$queryRaw`
      SELECT COUNT(*) as count FROM information_schema.tables 
      WHERE table_schema = 'public' AND table_name = 'Category'
    `;
    
    console.log('Tables existantes:', existingCategories);

    // Cr√©er les tables si elles n'existent pas
    console.log('üìã Cr√©ation des tables...');
    
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "Category" (
          "id" SERIAL PRIMARY KEY,
          "name" TEXT UNIQUE NOT NULL,
          "slug" TEXT UNIQUE NOT NULL,
          "icon" TEXT NOT NULL,
          "description" TEXT,
          "isActive" BOOLEAN NOT NULL DEFAULT true,
          "sortOrder" INTEGER NOT NULL DEFAULT 0,
          "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
          "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP
      )
    `;

    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "Subcategory" (
          "id" SERIAL PRIMARY KEY,
          "name" TEXT NOT NULL,
          "slug" TEXT NOT NULL,
          "description" TEXT,
          "isActive" BOOLEAN NOT NULL DEFAULT true,
          "sortOrder" INTEGER NOT NULL DEFAULT 0,
          "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
          "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
          "categoryId" INTEGER NOT NULL,
          CONSTRAINT "Subcategory_categoryId_fkey" FOREIGN KEY ("categoryId") REFERENCES "Category"("id") ON DELETE CASCADE ON UPDATE CASCADE,
          CONSTRAINT "Subcategory_categoryId_slug_key" UNIQUE ("categoryId", "slug")
      )
    `;

    // Ajouter les colonnes √† la table Annonce
    console.log('üîß Mise √† jour de la table Annonce...');
    
    await prisma.$executeRaw`ALTER TABLE "Annonce" ADD COLUMN IF NOT EXISTS "categoryId" INTEGER`;
    await prisma.$executeRaw`ALTER TABLE "Annonce" ADD COLUMN IF NOT EXISTS "subcategoryId" INTEGER`;
    await prisma.$executeRaw`ALTER TABLE "Annonce" ADD COLUMN IF NOT EXISTS "oldCategory" TEXT`;
    await prisma.$executeRaw`ALTER TABLE "Annonce" ADD COLUMN IF NOT EXISTS "oldSubcategory" TEXT`;

    // Ajouter les contraintes
    try {
      await prisma.$executeRaw`
        ALTER TABLE "Annonce" ADD CONSTRAINT "Annonce_categoryId_fkey" 
        FOREIGN KEY ("categoryId") REFERENCES "Category"("id") ON DELETE SET NULL ON UPDATE CASCADE
      `;
    } catch (error) {
      console.log('Contrainte categoryId d√©j√† existante');
    }

    try {
      await prisma.$executeRaw`
        ALTER TABLE "Annonce" ADD CONSTRAINT "Annonce_subcategoryId_fkey" 
        FOREIGN KEY ("subcategoryId") REFERENCES "Subcategory"("id") ON DELETE SET NULL ON UPDATE CASCADE
      `;
    } catch (error) {
      console.log('Contrainte subcategoryId d√©j√† existante');
    }

    // V√©rifier si les cat√©gories existent d√©j√†
    const categoryCount = await prisma.$queryRaw`SELECT COUNT(*) as count FROM "Category"`;
    console.log('Nombre de cat√©gories existantes:', categoryCount);

    if (categoryCount[0].count === '0') {
      console.log('üì¶ Peuplement des cat√©gories...');
      
      // Ins√©rer les cat√©gories principales
      await prisma.$executeRaw`
        INSERT INTO "Category" ("name", "slug", "icon", "description", "sortOrder") VALUES
        ('V√©hicules', 'vehicules', 'üöó', 'Voitures, motos, camions et autres v√©hicules', 1),
        ('Immobilier', 'immobilier', 'üè†', 'Appartements, maisons, terrains et locaux commerciaux', 2),
        ('√âlectronique', 'electronique', 'üì±', 'T√©l√©phones, ordinateurs et appareils √©lectroniques', 3),
        ('Mode', 'mode', 'üëï', 'V√™tements, chaussures et accessoires de mode', 4),
        ('Maison & Jardin', 'maison-jardin', 'üè°', 'Mobilier, √©lectrom√©nager et articles de jardinage', 5),
        ('Services', 'services', 'üõ†Ô∏è', 'Services professionnels et personnels', 6),
        ('Emploi', 'emploi', 'üíº', 'Offres d''emploi et formations professionnelles', 7),
        ('Locations de vacances', 'locations-vacances', 'üèñÔ∏è', 'Locations saisonni√®res et voyages', 8),
        ('Famille', 'famille', 'üë∂', 'Articles pour b√©b√©s et enfants', 9),
        ('Loisirs', 'loisirs', 'üéÆ', 'Divertissement, sport et loisirs', 10),
        ('Mat√©riel professionnel', 'materiel-professionnel', 'üöú', '√âquipements et mat√©riel professionnel', 11),
        ('Autre', 'autre', 'üì¶', 'Articles divers et non cat√©goris√©s', 12)
      `;

      // Ins√©rer toutes les sous-cat√©gories
      const subcategories = [
        // V√©hicules (categoryId = 1)
        ['Voitures', 'voitures', 1, 1],
        ['Motos', 'motos', 1, 2],
        ['Camions', 'camions', 1, 3],
        ['Bateaux', 'bateaux', 1, 4],
        ['Caravaning', 'caravaning', 1, 5],
        ['Utilitaires', 'utilitaires', 1, 6],
        ['Nautisme', 'nautisme', 1, 7],
        
        // Immobilier (categoryId = 2)
        ['Appartements', 'appartements', 2, 1],
        ['Maisons', 'maisons', 2, 2],
        ['Terrains', 'terrains', 2, 3],
        ['Locaux commerciaux', 'locaux-commerciaux', 2, 4],
        ['Colocations', 'colocations', 2, 5],
        ['Bureaux & Commerces', 'bureaux-commerces', 2, 6],
        
        // √âlectronique (categoryId = 3)
        ['T√©l√©phones & Objets connect√©s', 'telephones-objets-connectes', 3, 1],
        ['Ordinateurs', 'ordinateurs', 3, 2],
        ['Accessoires informatiques', 'accessoires-informatiques', 3, 3],
        ['Photo & vid√©o', 'photo-video', 3, 4],
        
        // Mode (categoryId = 4)
        ['V√™tements', 'vetements', 4, 1],
        ['Chaussures', 'chaussures', 4, 2],
        ['Accessoires', 'accessoires', 4, 3],
        ['Montres & Bijoux', 'montres-bijoux', 4, 4],
        
        // Maison & Jardin (categoryId = 5)
        ['Ameublement', 'ameublement', 5, 1],
        ['Appareils √©lectrom√©nagers', 'electromenager', 5, 2],
        ['D√©coration', 'decoration', 5, 3],
        ['Plantes & jardin', 'plantes-jardin', 5, 4],
        ['Bricolage', 'bricolage', 5, 5],
        
        // Services (categoryId = 6)
        ['Services aux entreprises', 'services-entreprises', 6, 1],
        ['Services √† la personne', 'services-personne', 6, 2],
        ['√âv√©nements', 'evenements', 6, 3],
        ['Artisans & Musiciens', 'artisans-musiciens', 6, 4],
        ['Baby-Sitting', 'baby-sitting', 6, 5],
        ['Cours particuliers', 'cours-particuliers', 6, 6],
        
        // Emploi (categoryId = 7)
        ['Offres d\'emploi', 'offres-emploi', 7, 1],
        ['Formations professionnelles', 'formations-professionnelles', 7, 2],
        
        // Locations de vacances (categoryId = 8)
        ['Locations saisonni√®res', 'locations-saisonnieres', 8, 1],
        ['Ventes flash vacances', 'ventes-flash-vacances', 8, 2],
        ['Locations Europe', 'locations-europe', 8, 3],
        
        // Famille (categoryId = 9)
        ['√âquipement b√©b√©', 'equipement-bebe', 9, 1],
        ['Mobilier enfant', 'mobilier-enfant', 9, 2],
        ['Jouets', 'jouets', 9, 3],
        
        // Loisirs (categoryId = 10)
        ['CD - Musique', 'cd-musique', 10, 1],
        ['DVD - Films', 'dvd-films', 10, 2],
        ['Livres', 'livres', 10, 3],
        ['Jeux & Jouets', 'jeux-jouets', 10, 4],
        ['Sport & Plein Air', 'sport-plein-air', 10, 5],
        
        // Mat√©riel professionnel (categoryId = 11)
        ['Tracteurs', 'tracteurs', 11, 1],
        ['BTP - Chantier', 'btp-chantier', 11, 2],
        ['Mat√©riel agricole', 'materiel-agricole', 11, 3],
        ['√âquipements pros', 'equipements-pros', 11, 4],
        
        // Autre (categoryId = 12)
        ['Divers', 'divers', 12, 1],
        ['Non cat√©goris√©', 'non-categorise', 12, 2],
      ];

      for (const [name, slug, categoryId, sortOrder] of subcategories) {
        await prisma.$executeRaw`
          INSERT INTO "Subcategory" ("name", "slug", "categoryId", "sortOrder") 
          VALUES (${name}, ${slug}, ${categoryId}, ${sortOrder})
        `;
      }
    }

    // V√©rification finale
    const finalCategoryCount = await prisma.$queryRaw`SELECT COUNT(*) as count FROM "Category"`;
    const finalSubcategoryCount = await prisma.$queryRaw`SELECT COUNT(*) as count FROM "Subcategory"`;
    
    console.log('‚úÖ Configuration termin√©e !');
    console.log(`üìä ${finalCategoryCount[0].count} cat√©gories cr√©√©es`);
    console.log(`üìä ${finalSubcategoryCount[0].count} sous-cat√©gories cr√©√©es`);

  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration:', error);
    throw error;
  }
}

async function main() {
  try {
    await setupCategories();
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

if (require.main === module) {
  main();
}

module.exports = { setupCategories }; 