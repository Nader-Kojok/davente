const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');

// Configuration
const API_BASE = 'http://localhost:3000/api';
const JWT_SECRET = process.env.JWT_SECRET || 'm2sln+yn85jJGzQ4DBNmg94jl8ZgH3G4gC83G6I3nx+ZUpPkfr4meoWHR87qbCRzWVMKNsz7OF5KKbCR/goI3w==';

// Fonction utilitaire pour faire des requ√™tes
async function makeRequest(url, options = {}) {
  try {
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    });
    
    const data = await response.json();
    return { status: response.status, data };
  } catch (error) {
    return { status: 500, error: error.message };
  }
}

// Test complet des APIs de param√®tres
async function testSettingsAPIs() {
  console.log('üß™ Test des APIs de param√®tres - Grabi\n');

  // 1. Cr√©er un utilisateur de test
  console.log('1Ô∏è‚É£ Cr√©ation d\'un utilisateur de test...');
  const registerResult = await makeRequest(`${API_BASE}/auth/register`, {
    method: 'POST',
    body: JSON.stringify({
      mobile: '+221700000001',
      password: 'TestPassword123!',
      name: 'Test User Settings',
      picture: ''
    })
  });

  if (registerResult.status !== 201) {
    console.error('‚ùå √âchec de la cr√©ation de l\'utilisateur:', registerResult.data);
    return;
  }

  const { user, token } = registerResult.data;
  console.log('‚úÖ Utilisateur cr√©√©:', user.name, '(ID:', user.id, ')');

  const authHeaders = { 'Authorization': `Bearer ${token}` };

  // 2. Test de r√©cup√©ration du profil
  console.log('\n2Ô∏è‚É£ Test de r√©cup√©ration du profil...');
  const profileResult = await makeRequest(`${API_BASE}/user/profile`, {
    headers: authHeaders
  });

  if (profileResult.status === 200) {
    console.log('‚úÖ Profil r√©cup√©r√© avec succ√®s');
    console.log('   - Langue:', profileResult.data.user.language);
    console.log('   - Fuseau horaire:', profileResult.data.user.timezone);
    console.log('   - Notifications email:', profileResult.data.user.emailNotifications);
  } else {
    console.error('‚ùå √âchec de r√©cup√©ration du profil:', profileResult.data);
  }

  // 3. Test de mise √† jour des param√®tres du compte
  console.log('\n3Ô∏è‚É£ Test de mise √† jour des param√®tres du compte...');
  const accountUpdateResult = await makeRequest(`${API_BASE}/user/profile`, {
    method: 'PATCH',
    headers: authHeaders,
    body: JSON.stringify({
      language: 'en',
      timezone: 'Europe/Paris',
      isActive: true
    })
  });

  if (accountUpdateResult.status === 200) {
    console.log('‚úÖ Param√®tres du compte mis √† jour');
    console.log('   - Nouvelle langue:', accountUpdateResult.data.user.language);
    console.log('   - Nouveau fuseau horaire:', accountUpdateResult.data.user.timezone);
  } else {
    console.error('‚ùå √âchec de mise √† jour des param√®tres du compte:', accountUpdateResult.data);
  }

  // 4. Test de mise √† jour des notifications
  console.log('\n4Ô∏è‚É£ Test de mise √† jour des notifications...');
  const notificationUpdateResult = await makeRequest(`${API_BASE}/user/profile`, {
    method: 'PATCH',
    headers: authHeaders,
    body: JSON.stringify({
      emailNotifications: false,
      smsNotifications: true,
      pushNotifications: false,
      marketingEmails: true
    })
  });

  if (notificationUpdateResult.status === 200) {
    console.log('‚úÖ Pr√©f√©rences de notification mises √† jour');
    console.log('   - Email:', notificationUpdateResult.data.user.emailNotifications);
    console.log('   - SMS:', notificationUpdateResult.data.user.smsNotifications);
    console.log('   - Push:', notificationUpdateResult.data.user.pushNotifications);
    console.log('   - Marketing:', notificationUpdateResult.data.user.marketingEmails);
  } else {
    console.error('‚ùå √âchec de mise √† jour des notifications:', notificationUpdateResult.data);
  }

  // 5. Test de mise √† jour des param√®tres de confidentialit√©
  console.log('\n5Ô∏è‚É£ Test de mise √† jour des param√®tres de confidentialit√©...');
  const privacyUpdateResult = await makeRequest(`${API_BASE}/user/profile`, {
    method: 'PATCH',
    headers: authHeaders,
    body: JSON.stringify({
      showPhone: false,
      showEmail: true,
      allowSms: false,
      allowCalls: true
    })
  });

  if (privacyUpdateResult.status === 200) {
    console.log('‚úÖ Param√®tres de confidentialit√© mis √† jour');
    console.log('   - Afficher t√©l√©phone:', privacyUpdateResult.data.user.showPhone);
    console.log('   - Afficher email:', privacyUpdateResult.data.user.showEmail);
    console.log('   - Autoriser SMS:', privacyUpdateResult.data.user.allowSms);
    console.log('   - Autoriser appels:', privacyUpdateResult.data.user.allowCalls);
  } else {
    console.error('‚ùå √âchec de mise √† jour de la confidentialit√©:', privacyUpdateResult.data);
  }

  // 6. Test de changement de mot de passe
  console.log('\n6Ô∏è‚É£ Test de changement de mot de passe...');
  const passwordChangeResult = await makeRequest(`${API_BASE}/user/password`, {
    method: 'PATCH',
    headers: authHeaders,
    body: JSON.stringify({
      currentPassword: 'TestPassword123!',
      newPassword: 'NewTestPassword456!'
    })
  });

  if (passwordChangeResult.status === 200) {
    console.log('‚úÖ Mot de passe chang√© avec succ√®s');
  } else {
    console.error('‚ùå √âchec du changement de mot de passe:', passwordChangeResult.data);
  }

  // 7. Test de d√©sactivation du compte
  console.log('\n7Ô∏è‚É£ Test de d√©sactivation du compte...');
  const deactivateResult = await makeRequest(`${API_BASE}/user/profile`, {
    method: 'PATCH',
    headers: authHeaders,
    body: JSON.stringify({
      isActive: false
    })
  });

  if (deactivateResult.status === 200) {
    console.log('‚úÖ Compte d√©sactiv√© avec succ√®s');
    console.log('   - Statut actif:', deactivateResult.data.user.isActive);
  } else {
    console.error('‚ùå √âchec de d√©sactivation du compte:', deactivateResult.data);
  }

  // 8. Test de suppression du compte
  console.log('\n8Ô∏è‚É£ Test de suppression du compte...');
  const deleteResult = await makeRequest(`${API_BASE}/user/delete`, {
    method: 'DELETE',
    headers: authHeaders
  });

  if (deleteResult.status === 200) {
    console.log('‚úÖ Compte supprim√© d√©finitivement avec succ√®s');
  } else {
    console.error('‚ùå √âchec de suppression du compte:', deleteResult.data);
  }

  console.log('\nüéâ Tests termin√©s !');
}

// Ex√©cuter les tests
if (typeof window === 'undefined') {
  // Node.js environment
  const fetch = require('node-fetch');
  global.fetch = fetch;
  testSettingsAPIs().catch(console.error);
} else {
  // Browser environment
  testSettingsAPIs().catch(console.error);
} 